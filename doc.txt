SPDX-License-Identifier: CC-BY-4.0

Portions Copyright 2022 Jean-Baptiste M. "JBQ" "Djaybee" Queru
Portions Copyright 2023 Jean-Baptiste M. "JBQ" "Djaybee" Queru

This work is licensed under the
Creative Commons Attribution 4.0 International License.
To view a copy of this license, visit
http://creativecommons.org/licenses/by/4.0/
or send a letter to
Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.




0. Introduction

This document is a collection of notes that I gathered while coding
for various classic computers and consoles, typically the ones
displaying bitmap graphics, which happen to be primarily 8-bit and
16-bit, with some possible exceptions (Nintendo Game Boy Advance,
arguably Atari Jaguar).

This document includes multiple types of information, that are not
individually identified as such:
* Facts about the pieces of hardware being described.
* As necessary, the familiar names of chips, instructions, registers,
    and other similar aspects.
* Original writing about that hardware (i.e. everything not included
    in the previous categories.)

The primary copy of this document can be found at
https://github.com/jbqueru/jbq-docs/blob/main/doc.txt

1. Atari 2600

1A. Atari 2600 introduction

The Atari 2600 is a simple 3-chip machine, notable for not having
enough hardware to generate an entire TV frame.

The CPU is a MOS 6507, which is a MOS 6502 core in a smaller package,
which limits it to 8kB of address space and eliminates interrupts.

The primary support chip is a MOS RIOT 6532 "RAM, I/O, Timer", which
is commonly called PIA "Peripheral Interface Adapter" (even though
PIA is the official name of the MOS 6520, a simpler chip). RIOT holds
128 bytes of RAM, I/O ports that map to the console switches and
joystick directions, and a timer that can't be polled (since it can't
trigger interrupts on the interrupt-less 6507).

The A/V chip is called TIA (Television Interface Adapter) and is a
custom chip created by Atari. It handles sound (2 channels with
several sound types and controllable volume but with poor frequency
control) and graphics (enough information to generate a single line
of TV signal, where creating an entire image requires to change the
content of each line in software, in sync with the generation).
It also includes a few additional input ports for controllers.

1B. Atari 2600 frame timings

The TIA in the Atari 2600 does not count lines in hardware. It relies
on software to do the counting. Even for the simplest displays, games
for the Atari 2600 have to be obsessive about counting lines. Even
when displaying a black screen, games for the 2600 have to keep track
of the line count in order to generate the proper TV sync signals.

To the beginner, it might feel premature to discuss that aspect so
early, but, in reality, even for games with the simplest graphics
(such as Adventure), counting lines is a very hard requirement.

In NTSC (and other 525-line systems), TIA generates lines that are
very slightly too long. 262 lines is the closest to the official
60 fps standard, and is the recommended number. Many games are off
by 1 or 2 lines from that number, which is believed to be harmless.
Some games are known to differ from those numbers significantly,
ranging from 237 to 286 lines, and such values are expected to cause
difficulties with various equipment, especially VCRs. With modern
development tools (i.e. emulators that can count lines accurately
during development), there is no excuse to use anything other than
exactly 262 lines.

In PAL (and other 625-line systems), TIA generates lines that are
a bit too long. The line count that would be closest to the official
50 fps would be 311 lines; however, PAL TVs need an even number of
lines to display colors, such that 312 lines ends up being the most
accurate number. Existing games are known to vary from 280 lines all
the way to 336. Once again, with modern emulators, it is easy to get
exactly 312 lines reliably.

Tweaking the official NTSC timing requirements to best match the
Atari 2600, an 262-line frame should have at least 3 lines of blank,
followed by exactly 3 lines of sync, followed by at least 13 to 15
lines of blank, with the complement being active display (which
could be as many as 243 lines). Since the Atari 2600 does not count
lines, there is no such thing as an official number of active lines.
A commonly recommended frame timing is 30 lines of blank, 3 lines
of sync, 37 lines of blank, and 192 lines of active display. Those
192 lines are expected to be displayed very reliably on most TVs,
to the point where information can be displayed to the very edge.
That was a fairly conservative approach, which is to be expected at
a time when scrolling or multi-room games were uncommon. That being
said, Nintendo's recommendation implies that 212 lines are safe
enough for non-critical game elements, offset slightly low, and an
average of the various recommendation converges toward 17 lines of
blank, 3 lines of sync, 30 lines of blank, and 212 active lines. In
those conditions, the top 8 lines as well as the bottom 12 should
be treated with care.

Official PAL timings are slightly harder to emulate as vertical sync
pulses aren't whole lines. That being said, 3 lines of blank, 3 lines
of sync, 19 lines of blank, and 287 active lines comes close.
At least 240 lines are expected to be reliably visible in PAL, though
I do not know of any recommended timing for those. At a glance,
it would appear that 26 lines of blank, 3 lines of sync, 43 lines of
blank, and 240 active lines, would add up to 240 centered lines, with
the possibility of pushing a little bit with 14/3/35/260, in which
case the same 8 top lines and 12 bottom lines are more risky.

2. MOS 6502

The 6502 is an 8-bit microprocessor, used in a variety of devices,
notably from Apple, Atari, Commodore, Acorn, Oric, Nintendo.

It is designed for simplicity. It has a full 16-bit address bus,
which is not multiplexed with the 8-bit data bus, but the only
internal 16-bit characteristic is the program counter. Notably,
it can't store data pointers in registers, those data pointers
have to be held in memory... and must themselves have a 8-bit
addresses. Also, the stack is limited to 256 bytes and has a fixed
address.

In practice, the first 256 bytes of memory, a.k.a. zeropage,
play a provileged role. While the 6502 doesn't store its registers
in memory like some other processors do, it still gives the zeropage
some special characteristics: it is faster to access absolute
addresses there, thanks to dedicated short addressing modes, and,
more importantly, it is the only place where data pointers can
be stored. That latter characteristic is why zeropage cannot be
treated like a mere optimization, it supports unique and critical
functionality.

The primary registers are:
* The accumulator (A, occasionally AC), which holds the result of
    most ALU instructions.
* The index registers X and Y. They are primarily used as offsets
    into memory (such as arrays). They can be incremented,
    decremented, compared, making them convenient loop counters.
    X is the index from absolute addresses for read-modify-write
    instructions in memory, and for load/store operations on Y.
    It is also used to access the stack.
    Y indexes absolute addresses for load/store operations on X.
    Additionally, X and Y are both used for operations on A, where X
    is typically faster for indirect zeropage access.
    In addition to absolute indexed operations, X and Y can be used
    for indirect addressing, X for arrays of pointers and Y for
    pointers to arrays.
* The stack pointer S. The only explicit access to that register is
    by copying to/from X. It is used explicitly by typical stack
    operations (push/pull, jsr/ret, interrupts). The stack is limited
    to the second page of memory, i.e. addresses 256 to 511.

The secondary registers are:
* The processor status (P). Accessed very explicitly with push/push,
    slightly less so with BRK/RTI (and interrupts). Some individual
    bits are set explicitly (CIDV). Some bits are set as side effects
    of various instructions (CZVN), where most data-handling
    instructions set Z and N (except stores), with C and V set based
    on the specifics of the instructions (though notably not by
    increments and decrements). CZVN can also be tested by conditional
    branches.
* The program counter (PC). The only true 16-bit register in the 6502,
    such that isntructions that access it are unrelated to the other
    instructions. JMP and RET load it (from constant, memory, stack),
    while JSR stores it (to stack) then loads it (from constant). BRK
    and RTI do the same, paired with P, as do interrupts.

Block diagrams suggests a range of additional registers, that
are used for implementation details: the current instruction and the
next one, a shadow copy of PC as input to its dedicated 16-bit
incrementer, data bus input and output, address bus output, and
input and output to the ALU.

1234567890123456789012345678901234567890123456789012345678901234567890
